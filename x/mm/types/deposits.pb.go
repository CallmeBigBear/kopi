// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/mm/deposits.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NextLoanIndex struct {
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *NextLoanIndex) Reset()         { *m = NextLoanIndex{} }
func (m *NextLoanIndex) String() string { return proto.CompactTextString(m) }
func (*NextLoanIndex) ProtoMessage()    {}
func (*NextLoanIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_4377270a8991865d, []int{0}
}
func (m *NextLoanIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextLoanIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextLoanIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextLoanIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextLoanIndex.Merge(m, src)
}
func (m *NextLoanIndex) XXX_Size() int {
	return m.Size()
}
func (m *NextLoanIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_NextLoanIndex.DiscardUnknown(m)
}

var xxx_messageInfo_NextLoanIndex proto.InternalMessageInfo

func (m *NextLoanIndex) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Loan struct {
	Index   int64                       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Address string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"amount"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_4377270a8991865d, []int{1}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Loan) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Loans struct {
	Denom string  `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Loans []*Loan `protobuf:"bytes,2,rep,name=loans,proto3" json:"loans,omitempty"`
}

func (m *Loans) Reset()         { *m = Loans{} }
func (m *Loans) String() string { return proto.CompactTextString(m) }
func (*Loans) ProtoMessage()    {}
func (*Loans) Descriptor() ([]byte, []int) {
	return fileDescriptor_4377270a8991865d, []int{2}
}
func (m *Loans) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loans.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loans.Merge(m, src)
}
func (m *Loans) XXX_Size() int {
	return m.Size()
}
func (m *Loans) XXX_DiscardUnknown() {
	xxx_messageInfo_Loans.DiscardUnknown(m)
}

var xxx_messageInfo_Loans proto.InternalMessageInfo

func (m *Loans) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Loans) GetLoans() []*Loan {
	if m != nil {
		return m.Loans
	}
	return nil
}

func init() {
	proto.RegisterType((*NextLoanIndex)(nil), "kopi.mm.NextLoanIndex")
	proto.RegisterType((*Loan)(nil), "kopi.mm.Loan")
	proto.RegisterType((*Loans)(nil), "kopi.mm.Loans")
}

func init() { proto.RegisterFile("kopi/mm/deposits.proto", fileDescriptor_4377270a8991865d) }

var fileDescriptor_4377270a8991865d = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x6a, 0xf3, 0x30,
	0x1c, 0xc4, 0xad, 0xf8, 0x73, 0x42, 0xf4, 0x35, 0x8b, 0x09, 0xc5, 0xb4, 0xa0, 0x18, 0x87, 0x80,
	0x97, 0x4a, 0xd0, 0x8e, 0x1d, 0x0a, 0xa6, 0x4b, 0x21, 0x74, 0xf0, 0xd8, 0xcd, 0xb1, 0x84, 0x63,
	0x52, 0xe9, 0x6f, 0x22, 0x05, 0xec, 0xb7, 0xe8, 0x63, 0x65, 0xcc, 0x58, 0x3a, 0x84, 0x62, 0xbf,
	0x48, 0x91, 0x9d, 0x6e, 0xdd, 0xee, 0xfe, 0x3f, 0x1d, 0x87, 0x0e, 0x5f, 0xef, 0xa0, 0x2a, 0x99,
	0x94, 0x8c, 0x8b, 0x0a, 0x74, 0x69, 0x34, 0xad, 0xf6, 0x60, 0xc0, 0x9f, 0xd8, 0x3b, 0x95, 0xf2,
	0x66, 0x5e, 0x40, 0x01, 0xfd, 0x8d, 0x59, 0x35, 0xe0, 0x68, 0x85, 0x67, 0xaf, 0xa2, 0x36, 0x6b,
	0xc8, 0xd4, 0x8b, 0xe2, 0xa2, 0xf6, 0xe7, 0xd8, 0x2b, 0xad, 0x08, 0x50, 0x88, 0x62, 0x37, 0x1d,
	0x4c, 0xa4, 0xf1, 0x3f, 0xfb, 0xe4, 0x6f, 0xea, 0x07, 0x78, 0x92, 0x71, 0xbe, 0x17, 0x5a, 0x07,
	0xa3, 0x10, 0xc5, 0xd3, 0xf4, 0xd7, 0xfa, 0x8f, 0x78, 0x9c, 0x49, 0x38, 0x28, 0x13, 0xb8, 0x21,
	0x8a, 0xaf, 0x92, 0xe5, 0xf1, 0xbc, 0x70, 0xbe, 0xce, 0x8b, 0xdb, 0x1c, 0xb4, 0x04, 0xad, 0xf9,
	0x8e, 0x96, 0xc0, 0x64, 0x66, 0xb6, 0x74, 0x2d, 0x8a, 0x2c, 0x6f, 0x9e, 0x45, 0x9e, 0x5e, 0x22,
	0x51, 0x82, 0x3d, 0x5b, 0xaa, 0x6d, 0x2b, 0x17, 0x0a, 0x64, 0xdf, 0x3a, 0x4d, 0x07, 0xe3, 0x2f,
	0xb1, 0xf7, 0x6e, 0x71, 0x30, 0x0a, 0xdd, 0xf8, 0xff, 0xfd, 0x8c, 0x5e, 0x7e, 0x4a, 0x6d, 0x28,
	0x1d, 0x58, 0xf2, 0x74, 0x6c, 0x09, 0x3a, 0xb5, 0x04, 0x7d, 0xb7, 0x04, 0x7d, 0x74, 0xc4, 0x39,
	0x75, 0xc4, 0xf9, 0xec, 0x88, 0xf3, 0xb6, 0x2a, 0x4a, 0xb3, 0x3d, 0x6c, 0x68, 0x0e, 0x92, 0xd9,
	0xe4, 0x9d, 0x04, 0x25, 0x9a, 0x5e, 0xb2, 0xda, 0x0e, 0x69, 0x9a, 0x4a, 0xe8, 0xcd, 0xb8, 0xdf,
	0xe9, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xda, 0x91, 0x46, 0x60, 0x01, 0x00, 0x00,
}

func (m *NextLoanIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextLoanIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextLoanIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintDeposits(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeposits(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDeposits(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintDeposits(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Loans) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loans) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loans) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeposits(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDeposits(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeposits(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeposits(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NextLoanIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDeposits(uint64(m.Index))
	}
	return n
}

func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDeposits(uint64(m.Index))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDeposits(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDeposits(uint64(l))
	return n
}

func (m *Loans) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDeposits(uint64(l))
	}
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 1 + l + sovDeposits(uint64(l))
		}
	}
	return n
}

func sovDeposits(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeposits(x uint64) (n int) {
	return sovDeposits(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NextLoanIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposits
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextLoanIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextLoanIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeposits(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposits
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposits
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposits
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposits
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeposits
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposits
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeposits(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposits
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loans) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposits
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loans: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loans: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposits
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposits
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposits
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposits
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, &Loan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeposits(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposits
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeposits(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeposits
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposits
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeposits
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeposits
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeposits
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeposits        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeposits          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeposits = fmt.Errorf("proto: unexpected end of group")
)
